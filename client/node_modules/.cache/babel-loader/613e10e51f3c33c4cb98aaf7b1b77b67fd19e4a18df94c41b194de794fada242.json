{"ast":null,"code":"export default class ApiClient {\n  constructor() {\n    this.base_url = \"localhost:8080\";\n  } // TODO: define base url in env file\n  // this.base_url = process.env.REACT_APP_BASE_API_URL | \"\";\n\n  async request(options) {\n    let query = new URLSearchParams(options.query || {}).toString();\n    if (query !== \"\") {\n      query = \"?\" + query;\n    }\n    let response;\n    try {\n      response = await fetch(this.base_url + options.url + query, {\n        method: options.method,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          ...options.headers\n        },\n        body: options.body ? JSON.stringify(options.body) : null\n      });\n    } catch (error) {\n      response = {\n        ok: false,\n        status: 500,\n        json: async () => {\n          return {\n            code: 500,\n            message: \"The server is unresponsive\",\n            description: error.toString()\n          };\n        }\n      };\n    }\n    return {\n      ok: response.ok,\n      status: response.status,\n      body: response.status !== 204 ? await response.json() : null\n    };\n  }\n  async get(url, query, options) {\n    return this.request({\n      method: \"GET\",\n      url,\n      query,\n      ...options\n    });\n  }\n  async post(url, body, options) {\n    return this.request({\n      method: \"POST\",\n      url,\n      body,\n      ...options\n    });\n  }\n  async put(url, body, options) {\n    return this.request({\n      method: \"PUT\",\n      url,\n      body,\n      ...options\n    });\n  }\n  async delete(url, options) {\n    return this.request({\n      method: \"DELETE\",\n      url,\n      ...options\n    });\n  }\n}","map":{"version":3,"names":["ApiClient","constructor","base_url","request","options","query","URLSearchParams","toString","response","fetch","url","method","headers","body","JSON","stringify","error","ok","status","json","code","message","description","get","post","put","delete"],"sources":["/Users/nduskina/programming/restaurants-nodejs-mongo/client/src/ApiClient.ts"],"sourcesContent":["export default class ApiClient {\n  base_url = \"localhost:8080\";\n\n  constructor() {\n    // TODO: define base url in env file\n    // this.base_url = process.env.REACT_APP_BASE_API_URL | \"\";\n  }\n\n  async request(options: any) {\n    let query = new URLSearchParams(options.query || {}).toString();\n    if (query !== \"\") {\n      query = \"?\" + query;\n    }\n\n    let response;\n    try {\n      response = await fetch(this.base_url + options.url + query, {\n        method: options.method,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          ...options.headers,\n        },\n        body: options.body ? JSON.stringify(options.body) : null,\n      });\n    } catch (error: any) {\n      response = {\n        ok: false,\n        status: 500,\n        json: async () => {\n          return {\n            code: 500,\n            message: \"The server is unresponsive\",\n            description: error.toString(),\n          };\n        },\n      };\n    }\n\n    return {\n      ok: response.ok,\n      status: response.status,\n      body: response.status !== 204 ? await response.json() : null,\n    };\n  }\n\n  async get(url: any, query: any, options: any) {\n    return this.request({ method: \"GET\", url, query, ...options });\n  }\n\n  async post(url: any, body: any, options: any) {\n    return this.request({ method: \"POST\", url, body, ...options });\n  }\n\n  async put(url: any, body: any, options: any) {\n    return this.request({ method: \"PUT\", url, body, ...options });\n  }\n\n  async delete(url: any, options: any) {\n    return this.request({ method: \"DELETE\", url, ...options });\n  }\n}\n"],"mappings":"AAAA,eAAe,MAAMA,SAAS,CAAC;EAG7BC,WAAWA,CAAA,EAAG;IAAA,KAFdC,QAAQ,GAAG,gBAAgB;EAK3B,CAAC,CAFC;EACA;;EAGF,MAAMC,OAAOA,CAACC,OAAY,EAAE;IAC1B,IAAIC,KAAK,GAAG,IAAIC,eAAe,CAACF,OAAO,CAACC,KAAK,IAAI,CAAC,CAAC,CAAC,CAACE,QAAQ,EAAE;IAC/D,IAAIF,KAAK,KAAK,EAAE,EAAE;MAChBA,KAAK,GAAG,GAAG,GAAGA,KAAK;IACrB;IAEA,IAAIG,QAAQ;IACZ,IAAI;MACFA,QAAQ,GAAG,MAAMC,KAAK,CAAC,IAAI,CAACP,QAAQ,GAAGE,OAAO,CAACM,GAAG,GAAGL,KAAK,EAAE;QAC1DM,MAAM,EAAEP,OAAO,CAACO,MAAM;QACtBC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,GAAGR,OAAO,CAACQ;QACb,CAAC;QACDC,IAAI,EAAET,OAAO,CAACS,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACX,OAAO,CAACS,IAAI,CAAC,GAAG;MACtD,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOG,KAAU,EAAE;MACnBR,QAAQ,GAAG;QACTS,EAAE,EAAE,KAAK;QACTC,MAAM,EAAE,GAAG;QACXC,IAAI,EAAE,MAAAA,CAAA,KAAY;UAChB,OAAO;YACLC,IAAI,EAAE,GAAG;YACTC,OAAO,EAAE,4BAA4B;YACrCC,WAAW,EAAEN,KAAK,CAACT,QAAQ;UAC7B,CAAC;QACH;MACF,CAAC;IACH;IAEA,OAAO;MACLU,EAAE,EAAET,QAAQ,CAACS,EAAE;MACfC,MAAM,EAAEV,QAAQ,CAACU,MAAM;MACvBL,IAAI,EAAEL,QAAQ,CAACU,MAAM,KAAK,GAAG,GAAG,MAAMV,QAAQ,CAACW,IAAI,EAAE,GAAG;IAC1D,CAAC;EACH;EAEA,MAAMI,GAAGA,CAACb,GAAQ,EAAEL,KAAU,EAAED,OAAY,EAAE;IAC5C,OAAO,IAAI,CAACD,OAAO,CAAC;MAAEQ,MAAM,EAAE,KAAK;MAAED,GAAG;MAAEL,KAAK;MAAE,GAAGD;IAAQ,CAAC,CAAC;EAChE;EAEA,MAAMoB,IAAIA,CAACd,GAAQ,EAAEG,IAAS,EAAET,OAAY,EAAE;IAC5C,OAAO,IAAI,CAACD,OAAO,CAAC;MAAEQ,MAAM,EAAE,MAAM;MAAED,GAAG;MAAEG,IAAI;MAAE,GAAGT;IAAQ,CAAC,CAAC;EAChE;EAEA,MAAMqB,GAAGA,CAACf,GAAQ,EAAEG,IAAS,EAAET,OAAY,EAAE;IAC3C,OAAO,IAAI,CAACD,OAAO,CAAC;MAAEQ,MAAM,EAAE,KAAK;MAAED,GAAG;MAAEG,IAAI;MAAE,GAAGT;IAAQ,CAAC,CAAC;EAC/D;EAEA,MAAMsB,MAAMA,CAAChB,GAAQ,EAAEN,OAAY,EAAE;IACnC,OAAO,IAAI,CAACD,OAAO,CAAC;MAAEQ,MAAM,EAAE,QAAQ;MAAED,GAAG;MAAE,GAAGN;IAAQ,CAAC,CAAC;EAC5D;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}